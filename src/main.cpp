// K. Kafara

// #define QUEUE_TEST
// #define MYVEC_TEST
// #define LOG
#define SFML_TEST


////////////////////////////////////////////////////////////
// -------
////////////////////////////////////////////////////////////
#include "./../lib/headers.hpp"
////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////
// Napis informujący o wersji programu.
////////////////////////////////////////////////////////////
const std::string VERSION = "v0.7 Printing graph";
////////////////////////////////////////////////////////////


int main()
{
    ////////////////////////////////////////////////////////////
    // Wyświetlanie informacji o programie.
    ////////////////////////////////////////////////////////////
    STAMP(VERSION);
    ////////////////////////////////////////////////////////////

#ifdef LOG
    ////////////////////////////////////////////////////////////
    // Ustawienia poszeczególnych loggerów.
    ////////////////////////////////////////////////////////////
    // myvec_logger.SetLevel(-1);
    // queue_logger.SetLevel(-1);
    ////////////////////////////////////////////////////////////
#endif

#ifdef SFML_TEST
    TEST_BEG("Running SFML");
    {
        ////////////////////////////////////////////////////////////
        // Timer
        ////////////////////////////////////////////////////////////
        Timer timer;
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // Utworzenie okna zgodnie z ustawieniami. 
        ////////////////////////////////////////////////////////////
        sf::RenderWindow window(sf::VideoMode(settings::window::WIDTH, settings::window::HEIGHT), settings::window::NAME);
        window.setFramerateLimit(100);
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // Do zbierania danych o koljenych posunięciach algorytmu
        ////////////////////////////////////////////////////////////
        MyVec<AlgLog> log;
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // Tworzenie grafu.  
        ////////////////////////////////////////////////////////////
        timer.Start();
        Graph graph(settings::tiles::TILES_IN_COL * settings::tiles::TILES_IN_ROW);
        timer.Stop();
        std::cout << "Czas alokacji grafu: " << timer.GetElapsedTime() << "\n";
        ////////////////////////////////////////////////////////////


        sf::RectangleShape rect;
        rect.setPosition({300, 300});
        rect.setFillColor(sf::Color::Red);
        rect.setSize({100, 100});
        rect.setOutlineThickness(-1);
        rect.setOutlineColor(sf::Color::Black);

        ////////////////////////////////////////////////////////////
        // Główna pętla programu
        ////////////////////////////////////////////////////////////
        while (window.isOpen())
        {
            sf::Event event;

            while (window.pollEvent(event))
            {
                if (event.type == sf::Event::Closed || sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Escape) == true)
                    window.close();
                
                window.clear();
                graph.DrawTo(window);
                window.draw(rect);
                window.display();
            }
        }       
        ////////////////////////////////////////////////////////////
    }
    TEST_END();
#endif
    return 0;
}