// K. Kafara

#ifndef __MYVEC_HPP__
#define __MYVEC_HPP__

#include <stdlib.h>
#include "../log/log.hpp"
// testy
#include <iostream>

////////////////////////////////////////////////////////////
// Dynamiczna tablica na typ <Type>. Wersja 1.0
// Pamięć rezerwowana jest na stercie.
// Dostępne operacje:
// TODO
////////////////////////////////////////////////////////////
template<class Type> class MyVec
{
private:
    // Wskaźnik na pierwszy element tablicy
    Type * head;
    // Wskaźnik na ostatni poprawny element tablicy. Wskazuje na nullptr, jeżeli w tablicy nie ma żadnego elementu
    Type * tail;
    // Rozmiar zarezerwowanego obszaru
    int size;
    // obecny rozmiar tablicy
    int current_size;

    ////////////////////////////////////////////////////////////
    // Zmienne statyczne służące do inicjalizacji wektora
    ////////////////////////////////////////////////////////////
    static constexpr int INITIAL_NO_PARAM_SIZE = 2;
    static constexpr float SIZE_FACTOR = 2.0f;
    static constexpr float EXT_FACTOR = 2.0f;
    ////////////////////////////////////////////////////////////
public:
    ////////////////////////////////////////////////////////////
    // @brief Konstruktor. Rezerwuje miejsce na SIZE_FACTOR * (@param size) elementów.
    // 
    ////////////////////////////////////////////////////////////
    MyVec(const int size);
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    // @brief Konstruktor. Rezerwuje miejsce na INTIAL_NO_PARAM_SIZE elementów. 
    ////////////////////////////////////////////////////////////
    MyVec();
    ////////////////////////////////////////////////////////////
    
    ////////////////////////////////////////////////////////////
    // @brief Destruktor
    ////////////////////////////////////////////////////////////
    ~MyVec();
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    // @brief Dodaje element na koniec wektora. 
    ////////////////////////////////////////////////////////////
    void PushBack(const Type x);
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    // @brief Usuwa ostatni element z wektora.
    ////////////////////////////////////////////////////////////
    void PopBack();
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    // @brief Operator []. 
    // Na czas testów: sprawdza czy @param index jest w poprawnym zakresie
    // TODO: Trzeba się zdecydować, czy chcecmy zwracać przez wartość,
    // czy może lepiej zwracać referencję
    ////////////////////////////////////////////////////////////
    Type & operator[] (const int index) const;
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief Zwraca liczbę elementów w wektorze
    // @attribute [[nodiscard]]
    ////////////////////////////////////////////////////////////
    [[nodiscard]] int GetSize() const;
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    // @brief Zwraca wskaźnik do obszaru zarezerwowanego na wektor
    // o rozmiarze @param alloc_size
    // @attr nodiscard
    ////////////////////////////////////////////////////////////
    [[nodiscard]] Type * AllocVec_Malloc(size_t alloc_size);
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    // @brief Zwalnia pamięć zarezerwowaną na wektor
    ////////////////////////////////////////////////////////////
    void FreeVec_Malloc(Type * head);
    ////////////////////////////////////////////////////////////
};
////////////////////////////////////////////////////////////



#include "MyVec.tpp"

#endif 