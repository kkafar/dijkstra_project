// K. Kafara

#ifndef __GRAPH_HPP__
#define __GRAPH_HPP__
#include <iostream>
#include  "./../linkedlist/linkedlist.hpp"

////////////////////////////////////////////////////////////
// SFML
////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
//  Klasa reprezentująca graf w postaci listy sąsiedztwa
////////////////////////////////////////////////////////////
class Graph
{
private:
    ////////////////////////////////////////////////////////////
    int rank;
    ////////////////////////////////////////////////////////////
        
public:
    ////////////////////////////////////////////////////////////
    struct Edge
    {
        ////////////////////////////////////////////////////////////
        int e, weight;
        ////////////////////////////////////////////////////////////
        Edge(const int e = 0, const int weight = 1);
        ////////////////////////////////////////////////////////////
        void SetWeight(const int & w) { weight = w; }
        ////////////////////////////////////////////////////////////
    };
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    struct Vertex : public LinkedList<Edge> 
    {
        ////////////////////////////////////////////////////////////
        int colour;
        ////////////////////////////////////////////////////////////
        bool visited;
        ////////////////////////////////////////////////////////////
        Vertex();
        ////////////////////////////////////////////////////////////
        Vertex(const int colour, bool visited = false);
        // ~V();
        ////////////////////////////////////////////////////////////
        void SetColour(const int & val);
        ////////////////////////////////////////////////////////////
        void SetVisited(const bool & val);
        ////////////////////////////////////////////////////////////
        bool IsVisited();
        ////////////////////////////////////////////////////////////
    };
    ////////////////////////////////////////////////////////////
    Vertex * graph;
    ////////////////////////////////////////////////////////////
    Graph(const int rank = 0);
    ////////////////////////////////////////////////////////////
    ~Graph();
    ////////////////////////////////////////////////////////////
    void AddDirectedEdge(const int b, const int e, const int weight = 1);
    ////////////////////////////////////////////////////////////
    void Print() const;
    ////////////////////////////////////////////////////////////
};
////////////////////////////////////////////////////////////

#endif
