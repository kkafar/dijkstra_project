// K. Kafara

#ifndef __GRAPH_HPP__
#define __GRAPH_HPP__

////////////////////////////////////////////////////////////
#include <iostream>
#include  "./../linkedlist/linkedlist.hpp"
// #include "../MyVec/MyVec.hpp"
#include "../queue/queue.hpp"
#include "../AlgLog/AlgLog.hpp"
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SFML
////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
//  Klasa reprezentująca graf w postaci listy sąsiedztwa
////////////////////////////////////////////////////////////
class Graph
{
private:
    ////////////////////////////////////////////////////////////
    int rank;
    ////////////////////////////////////////////////////////////
    void Wait(const int & miliseconds) const;
    ////////////////////////////////////////////////////////////
public:
    ////////////////////////////////////////////////////////////
    class Edge
    {
        ////////////////////////////////////////////////////////////
        int e, weight;
        ////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////
        Edge(const int e = 0, const int weight = 1);
        ////////////////////////////////////////////////////////////
        void SetWeight(const int & w) { weight = w; }
        ////////////////////////////////////////////////////////////
        inline int GetEnd() const { return e; }
        ////////////////////////////////////////////////////////////
        inline int GetWeight() const { return weight; }
        ////////////////////////////////////////////////////////////
    };
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    class Vertex : public MyVec<Edge> 
    {
    private:
        ////////////////////////////////////////////////////////////
        bool visited;
        ////////////////////////////////////////////////////////////
        int distance;
        ////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////
        Vertex();
        ////////////////////////////////////////////////////////////
        Vertex(sf::Color color, bool visited = false);
        // ~V();
        ////////////////////////////////////////////////////////////
        void SetColour(const int& r, const int& g, const int& b, const int& alpha = 255);
        ////////////////////////////////////////////////////////////
        void SetVisited(const bool & val);
        ////////////////////////////////////////////////////////////
        void SetDistance(const int & dist);
        ////////////////////////////////////////////////////////////
        inline int GetDistance() const { return distance; }
        ////////////////////////////////////////////////////////////
        bool IsVisited() const;
        ////////////////////////////////////////////////////////////
        sf::Color color;
        ////////////////////////////////////////////////////////////
        sf::RectangleShape rect;
        ////////////////////////////////////////////////////////////
    };
    ////////////////////////////////////////////////////////////
    Vertex * graph;
    ////////////////////////////////////////////////////////////
    Graph(const int rank = 0, const int tile_size = 32);
    //////////////////////////////////////////////f//////////////
    ~Graph();
    ////////////////////////////////////////////////////////////
    void AddDirectedEdge(const int b, const int e, const int weight = 1);
    ////////////////////////////////////////////////////////////
    void Dijkstra(const int s, const int t, MyVec<AlgLog>& log);
    ////////////////////////////////////////////////////////////
    // void Print() const;
    ////////////////////////////////////////////////////////////
    void DrawTo(sf::RenderWindow& window) const;
    ////////////////////////////////////////////////////////////
};
////////////////////////////////////////////////////////////

#endif
