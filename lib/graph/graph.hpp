// K. Kafara

#ifndef __GRAPH_HPP__
#define __GRAPH_HPP__

////////////////////////////////////////////////////////////
#include <iostream>
#include  "./../linkedlist/linkedlist.hpp"
// #include "../MyVec/MyVec.hpp"
#include "../queue/queue.hpp"
#include "../AlgLog/AlgLog.hpp"
#include "../../conf/settings.hpp"
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SFML
////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
//  @brief Klasa reprezentująca graf w postaci listy sąsiedztwa
////////////////////////////////////////////////////////////
class Graph
{
private:
    ////////////////////////////////////////////////////////////
    int rank;
    ////////////////////////////////////////////////////////////
    // const int tile_width, tile_height;
    ////////////////////////////////////////////////////////////
    // void Wait(const int & miliseconds) const;
    ////////////////////////////////////////////////////////////

public:
    ////////////////////////////////////////////////////////////
    // @brief Podklasa reprezentująca krawędź w grafie
    ////////////////////////////////////////////////////////////
    class Edge
    {
        ////////////////////////////////////////////////////////////
        // Pola
        ////////////////////////////////////////////////////////////
        // indeks wierzchołka końcowego 
        int e;
        // waga krawędzi 
        int weight;
        ////////////////////////////////////////////////////////////

    public:
        ////////////////////////////////////////////////////////////
        // @brief Konstruktor
        ////////////////////////////////////////////////////////////
        Edge(const int e = 0, const int weight = 1);
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Ustawia wagę krawędzi na @param w
        ////////////////////////////////////////////////////////////
        void SetWeight(const int & w) { weight = w; }
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Zwraca wierzchołek końcowy krawędzi 
        ////////////////////////////////////////////////////////////
        /* [[nodicard]] */ inline int GetEnd() const { return e; }
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Zwraca wagę krawędzi
        ////////////////////////////////////////////////////////////
        /* [[nodiscard]] */ inline int GetWeight() const { return weight; }
        ////////////////////////////////////////////////////////////
    };
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief Podklasa reprezentująca pojedynczy wierzchołek grafu
    ////////////////////////////////////////////////////////////
    class Vertex : public MyVec<Edge> 
    {
    private: 
        ////////////////////////////////////////////////////////////
        // true - jeżeli wierzchołek był odwiedzony
        // false - wpp
        // Inicjalizowana wartością false przez konstruktor. 
        bool visited;
        ////////////////////////////////////////////////////////////
        // Odległość danego wierzchołka od wierzchołka startowego algorytmu. 
        // Nie jest inicjalizowana przez żaden konstrutkor. 
        int distance;
        ////////////////////////////////////////////////////////////
        // sf::Color color;
        ////////////////////////////////////////////////////////////
        // Rodzic danego wierzchołka w najkrótszej ścieżce
        // Pole inicjalizowane przez konstruktor wartością -1
        int parent;
        ////////////////////////////////////////////////////////////
    public:
        ////////////////////////////////////////////////////////////
        // todo
        sf::RectangleShape rect;
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Konstruktor.
        // 
        // Inicjalizuje @field visited wartością false
        // Ustawia kolor płytki na biały
        ////////////////////////////////////////////////////////////
        Vertex();
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Konstruktor
        // 
        // Ustawia kolor płytki na @param color
        // Ustawia @field visited na @param visited
        ////////////////////////////////////////////////////////////
        Vertex(sf::Color color, bool visited = false);
        ////////////////////////////////////////////////////////////

 
        ////////////////////////////////////////////////////////////
        // @brief Domyślny destruktor
        ////////////////////////////////////////////////////////////
        ~Vertex() = default;
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Ustawia kolor płytki (wierzchołka) 
        // na (R, G, B, alpha) = (@param r, @param g, @param b, @param alpha)
        ////////////////////////////////////////////////////////////
        void SetColour(const int& r, const int& g, const int& b, const int& alpha = 255);
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Zmienia kolor z (r, g, b, alpha) na 
        // (r + delta_r, g + delta_g, b + delta_b, alpha + delta_alpha)
        // Wartości nie przekroczą 255
        ////////////////////////////////////////////////////////////
        void ChangeTone(const uint& delta_r = 0, const uint& delta_g = 0, const uint& delta_b = 0, const uint& delta_alpha = 0);
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Ustawia wartość @field visited na wartość @param val
        ////////////////////////////////////////////////////////////
        void SetVisited(const bool & val);
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Ustawia wartość @field distance na wartość @param dist
        ////////////////////////////////////////////////////////////
        void SetDistance(const int & dist);
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Zwraca wartość @field distance
        ////////////////////////////////////////////////////////////
        [[nodiscard]] inline int GetDistance() const { return distance; }
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Zwraca wartość @field visited s
        ////////////////////////////////////////////////////////////
        [[nodiscard]] bool IsVisited() const;
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Ustawia wartość @field parent na wartość @param parent
        ////////////////////////////////////////////////////////////
        inline void SetParent(const int parent) { this->parent = parent; }
        ////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////
        // @brief Zwraca indeks rodzica danego wierzchołka
        // lub -1 jeżeli rodzic nie jest wyznaczony (i wartość
        // tej zmiennej nie została zmieniona na inną)
        ////////////////////////////////////////////////////////////
        [[nodiscard]] inline int GetParent() const { return parent; }
        ////////////////////////////////////////////////////////////
    };

    ////////////////////////////////////////////////////////////
    Vertex * graph;
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief Konstruktor 
    // Ustawia @field rank na @param rank.
    // @default rank = 0
    ////////////////////////////////////////////////////////////
    Graph(const int rank = 0);
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief Destruktor 
    // Zwalnia cała zarezerwowaną przez konstruktor pamięć
    ////////////////////////////////////////////////////////////
    ~Graph();
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief Dodaje do grafu krawędź skierowaną
    // @param b - indeks wierzchołka początkego krawędzi
    // @param e - indeks wierzchołka końcowego krawędzi
    // @param w - waga krawędzi (domyślnie 1)
    ////////////////////////////////////////////////////////////
    void AddDirectedEdge(const int b, const int e, const int weight = 1);
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief Dodaje do grafu krawędź nieskierowaną
    // @param b - indeks wierzchołka początkego krawędzi
    // @param e - indeks wierzchołka końcowego krawędzi
    // @param w - waga krawędzi (domyślnie 1)
    ////////////////////////////////////////////////////////////
    void AddUndirectedEdge(const int b, const int e, const int weight = 1);
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief Algorytm Dijkstry - wyszukiwania najkrótszej ścieżki w grafie. 
    // @param s - wierzchołek poczatkowy algorytmu
    // @param t - wierzchołek końcowy algorytmu
    // @param log - agregator danych (kolejnych kroków algortymu)
    ////////////////////////////////////////////////////////////
    void Dijkstra(const int s, const int t, MyVec<AlgLog>& log);
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    // @brief
    ////////////////////////////////////////////////////////////
    bool MakeStep(MyVec<AlgLog>& log);
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief Wypisuje graf w postaci listy sąsiedztwa
    ////////////////////////////////////////////////////////////
    void Print() const;
    ////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////
    // @brief "Rysuje" wszystkie płytki (wierzchołki) na oknie @param window
    ////////////////////////////////////////////////////////////
    void DrawTo(sf::RenderWindow& window) const;
    ////////////////////////////////////////////////////////////
};
////////////////////////////////////////////////////////////



#endif /* __GRAPH_HPP__ */
